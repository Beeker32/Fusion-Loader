(async () => {
    document.getElementById('setLevel').onclick = function() {
    // Inject SweetAlert2
    const swalScript = document.createElement('script');
    swalScript.src = 'https://cdn.jsdelivr.net/npm/sweetalert2@11';
    document.head.appendChild(swalScript);
    await new Promise((resolve) => {
      swalScript.onload = resolve;
    });
  
    // Define the hack function
    const hack = (name, description, callback) => {
      console.log(`Hack: ${name} - ${description}`);
      callback(hack, player);
    };
  
    // Define the InputTypes.integer function using SweetAlert2
    const InputTypes = {
      integer: async (title, min, max) => {
        const { value: level } = await Swal.fire({
          title: title,
          input: 'number',
          inputAttributes: {
            min: min,
            max: max,
            step: 1
          },
          inputValue: min,
          showCancelButton: true,
          confirmButtonText: 'Submit',
          showLoaderOnConfirm: true,
          preConfirm: (value) => {
            return new Promise((resolve) => {
              if (value < min || value > max) {
                Swal.showValidationMessage(`Level must be between ${min} and ${max}`);
              } else {
                resolve(value);
              }
            });
          },
          allowOutsideClick: () => !Swal.isLoading()
        });
        return level;
      }
    };
  
    // Define the success function using SweetAlert2
    const success = (message) => {
      Swal.fire({
        toast: true,
        position: 'bottom',
        icon: 'success',
        title: message,
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true
      });
    };
  
    // Define the changeLevel function (assuming it exists in your context)
    const changeLevel = (value, player) => {
      // Placeholder function: Implement this based on your game logic
      console.log(`Changing player level to ${value}`);
      player.level = value; // Example implementation
    };
  
    // Get the player object
    const player = Boot.prototype.game._state._current.user.source;
  
    // Execute the hack
    hack("Set Level", "Set's the level of your player.", async (hack, player) => {
      const value = await InputTypes.integer("Please enter the level you want to be.", 1, 100);
      changeLevel(value, player);
      success(`You are now level ${value}.`);
    });
  }})();
  